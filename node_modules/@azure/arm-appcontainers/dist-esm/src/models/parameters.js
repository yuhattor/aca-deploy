/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AuthConfig as AuthConfigMapper, ContainerApp as ContainerAppMapper, DaprComponent as DaprComponentMapper, ManagedEnvironment as ManagedEnvironmentMapper, Certificate as CertificateMapper, CertificatePatch as CertificatePatchMapper, CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper, ManagedEnvironmentStorage as ManagedEnvironmentStorageMapper, SourceControl as SourceControlMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const containerAppName = {
    parameterPath: "containerAppName",
    mapper: {
        serializedName: "containerAppName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const authConfigName = {
    parameterPath: "authConfigName",
    mapper: {
        serializedName: "authConfigName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const authConfigEnvelope = {
    parameterPath: "authConfigEnvelope",
    mapper: AuthConfigMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const containerAppEnvelope = {
    parameterPath: "containerAppEnvelope",
    mapper: ContainerAppMapper
};
export const customHostname = {
    parameterPath: ["options", "customHostname"],
    mapper: {
        serializedName: "customHostname",
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const revisionName = {
    parameterPath: "revisionName",
    mapper: {
        serializedName: "revisionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const replicaName = {
    parameterPath: "replicaName",
    mapper: {
        serializedName: "replicaName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const environmentName = {
    parameterPath: "environmentName",
    mapper: {
        serializedName: "environmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const componentName = {
    parameterPath: "componentName",
    mapper: {
        serializedName: "componentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const daprComponentEnvelope = {
    parameterPath: "daprComponentEnvelope",
    mapper: DaprComponentMapper
};
export const environmentEnvelope = {
    parameterPath: "environmentEnvelope",
    mapper: ManagedEnvironmentMapper
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateEnvelope = {
    parameterPath: ["options", "certificateEnvelope"],
    mapper: CertificateMapper
};
export const certificateEnvelope1 = {
    parameterPath: "certificateEnvelope",
    mapper: CertificatePatchMapper
};
export const checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequestMapper
};
export const storageName = {
    parameterPath: "storageName",
    mapper: {
        serializedName: "storageName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const storageEnvelope = {
    parameterPath: "storageEnvelope",
    mapper: ManagedEnvironmentStorageMapper
};
export const sourceControlName = {
    parameterPath: "sourceControlName",
    mapper: {
        serializedName: "sourceControlName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const sourceControlEnvelope = {
    parameterPath: "sourceControlEnvelope",
    mapper: SourceControlMapper
};
//# sourceMappingURL=parameters.js.map