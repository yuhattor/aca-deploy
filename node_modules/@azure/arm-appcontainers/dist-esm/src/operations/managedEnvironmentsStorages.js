/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing ManagedEnvironmentsStorages operations. */
export class ManagedEnvironmentsStoragesImpl {
    /**
     * Initialize a new instance of the class ManagedEnvironmentsStorages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all storages for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName, environmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, options }, listOperationSpec);
    }
    /**
     * Get storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    get(resourceGroupName, environmentName, storageName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, storageName, options }, getOperationSpec);
    }
    /**
     * Create or update storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param storageEnvelope Configuration details of storage.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, environmentName, storageName, storageEnvelope, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            environmentName,
            storageName,
            storageEnvelope,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Delete storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    delete(resourceGroupName, environmentName, storageName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, environmentName, storageName, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedEnvironmentStoragesCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.environmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedEnvironmentStorage
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.environmentName,
        Parameters.storageName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedEnvironmentStorage
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    requestBody: Parameters.storageEnvelope,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.environmentName,
        Parameters.storageName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/storages/{storageName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.environmentName,
        Parameters.storageName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=managedEnvironmentsStorages.js.map