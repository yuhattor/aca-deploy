import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ContainerAppsAuthConfigs } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { AuthConfig, ContainerAppsAuthConfigsListByContainerAppOptionalParams, ContainerAppsAuthConfigsGetOptionalParams, ContainerAppsAuthConfigsGetResponse, ContainerAppsAuthConfigsCreateOrUpdateOptionalParams, ContainerAppsAuthConfigsCreateOrUpdateResponse, ContainerAppsAuthConfigsDeleteOptionalParams } from "../models";
/** Class containing ContainerAppsAuthConfigs operations. */
export declare class ContainerAppsAuthConfigsImpl implements ContainerAppsAuthConfigs {
    private readonly client;
    /**
     * Initialize a new instance of the class ContainerAppsAuthConfigs class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get the Container App AuthConfigs in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    listByContainerApp(resourceGroupName: string, containerAppName: string, options?: ContainerAppsAuthConfigsListByContainerAppOptionalParams): PagedAsyncIterableIterator<AuthConfig>;
    private listByContainerAppPagingPage;
    private listByContainerAppPagingAll;
    /**
     * Get the Container App AuthConfigs in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    private _listByContainerApp;
    /**
     * Get a AuthConfig of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, containerAppName: string, authConfigName: string, options?: ContainerAppsAuthConfigsGetOptionalParams): Promise<ContainerAppsAuthConfigsGetResponse>;
    /**
     * Create or update the AuthConfig for a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param authConfigEnvelope Properties used to create a Container App AuthConfig
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, containerAppName: string, authConfigName: string, authConfigEnvelope: AuthConfig, options?: ContainerAppsAuthConfigsCreateOrUpdateOptionalParams): Promise<ContainerAppsAuthConfigsCreateOrUpdateResponse>;
    /**
     * Delete a Container App AuthConfig.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, containerAppName: string, authConfigName: string, options?: ContainerAppsAuthConfigsDeleteOptionalParams): Promise<void>;
    /**
     * ListByContainerAppNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param nextLink The nextLink from the previous successful call to the ListByContainerApp method.
     * @param options The options parameters.
     */
    private _listByContainerAppNext;
}
//# sourceMappingURL=containerAppsAuthConfigs.d.ts.map