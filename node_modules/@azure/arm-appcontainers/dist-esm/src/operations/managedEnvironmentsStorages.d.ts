import { ManagedEnvironmentsStorages } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { ManagedEnvironmentsStoragesListOptionalParams, ManagedEnvironmentsStoragesListResponse, ManagedEnvironmentsStoragesGetOptionalParams, ManagedEnvironmentsStoragesGetResponse, ManagedEnvironmentStorage, ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams, ManagedEnvironmentsStoragesCreateOrUpdateResponse, ManagedEnvironmentsStoragesDeleteOptionalParams } from "../models";
/** Class containing ManagedEnvironmentsStorages operations. */
export declare class ManagedEnvironmentsStoragesImpl implements ManagedEnvironmentsStorages {
    private readonly client;
    /**
     * Initialize a new instance of the class ManagedEnvironmentsStorages class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get all storages for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsStoragesListOptionalParams): Promise<ManagedEnvironmentsStoragesListResponse>;
    /**
     * Get storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, storageName: string, options?: ManagedEnvironmentsStoragesGetOptionalParams): Promise<ManagedEnvironmentsStoragesGetResponse>;
    /**
     * Create or update storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param storageEnvelope Configuration details of storage.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, storageName: string, storageEnvelope: ManagedEnvironmentStorage, options?: ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams): Promise<ManagedEnvironmentsStoragesCreateOrUpdateResponse>;
    /**
     * Delete storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, storageName: string, options?: ManagedEnvironmentsStoragesDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=managedEnvironmentsStorages.d.ts.map