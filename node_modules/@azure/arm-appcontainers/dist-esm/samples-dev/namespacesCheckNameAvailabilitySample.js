/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerAppsAPIClient } from "@azure/arm-appcontainers";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Checks if resource name is available.
 *
 * @summary Checks if resource name is available.
 * x-ms-original-file: specification/app/resource-manager/Microsoft.App/stable/2022-03-01/examples/Certificates_CheckNameAvailability.json
 */
function certificatesCheckNameAvailability() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "examplerg";
        const environmentName = "testcontainerenv";
        const checkNameAvailabilityRequest = {
            name: "testcertificatename",
            type: "Microsoft.App/managedEnvironments/certificates"
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerAppsAPIClient(credential, subscriptionId);
        const result = yield client.namespaces.checkNameAvailability(resourceGroupName, environmentName, checkNameAvailabilityRequest);
        console.log(result);
    });
}
certificatesCheckNameAvailability().catch(console.error);
/**
 * This sample demonstrates how to Checks if resource name is available.
 *
 * @summary Checks if resource name is available.
 * x-ms-original-file: specification/app/resource-manager/Microsoft.App/stable/2022-03-01/examples/ContainerApps_CheckNameAvailability.json
 */
function containerAppsCheckNameAvailability() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = "examplerg";
        const environmentName = "testcontainerenv";
        const checkNameAvailabilityRequest = {
            name: "testcappname",
            type: "Microsoft.App/containerApps"
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerAppsAPIClient(credential, subscriptionId);
        const result = yield client.namespaces.checkNameAvailability(resourceGroupName, environmentName, checkNameAvailabilityRequest);
        console.log(result);
    });
}
containerAppsCheckNameAvailability().catch(console.error);
//# sourceMappingURL=namespacesCheckNameAvailabilitySample.js.map